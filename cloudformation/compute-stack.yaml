AWSTemplateFormatVersion: '2010-09-09'
Description: 'Lambda function and IAM roles for Secure Photo Downloader authentication handler'

Parameters:
  ProjectName:
    Type: String
    Default: secure-photo-downloader
    Description: Name of the project (used for resource naming)
  
  S3BucketName:
    Type: String
    Description: Name of the S3 bucket containing files
  
  S3ObjectKey:
    Type: String
    Default: photos/photos.zip
    Description: S3 object key for the file to be downloaded
  
  DownloadExpirySeconds:
    Type: Number
    Default: 3600
    MinValue: 300
    MaxValue: 86400
    Description: Download link expiry time in seconds (5 minutes to 24 hours)

  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Environment name for resource tagging

  LambdaTimeout:
    Type: Number
    Default: 30
    MinValue: 3
    MaxValue: 900
    Description: Lambda function timeout in seconds

  LambdaMemorySize:
    Type: Number
    Default: 256
    AllowedValues: [128, 256, 512, 1024, 2048, 3008]
    Description: Lambda function memory size in MB

  LogRetentionDays:
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Description: CloudWatch logs retention period in days

Resources:
  # IAM Role for Lambda function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-lambda-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:HeadObject
                Resource: !Sub 'arn:aws:s3:::${S3BucketName}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub 'arn:aws:s3:::${S3BucketName}'
                Condition:
                  StringLike:
                    's3:prefix': 'photos/*'
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ProjectName}-*'
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: LambdaExecution

  # Lambda function
  AuthHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-auth-handler'
      Description: 'Handles OAuth callback and generates secure S3 download links'
      Runtime: python3.11
      Handler: auth-handler.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: !Ref LambdaTimeout
      MemorySize: !Ref LambdaMemorySize
      Environment:
        Variables:
          BUCKET_NAME: !Ref S3BucketName
          OBJECT_KEY: !Ref S3ObjectKey
          DOWNLOAD_EXPIRY: !Ref DownloadExpirySeconds
          APP_NAME: 'Secure Photo Downloader'
          ENVIRONMENT: !Ref Environment
          LOG_LEVEL: !If [IsProduction, 'INFO', 'DEBUG']
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from botocore.exceptions import ClientError
          
          def lambda_handler(event, context):
              """
              Placeholder Lambda function - replace with actual deployment
              """
              print(f"Event: {json.dumps(event)}")
              
              return {
                  'statusCode': 200,
                  'headers': {
                      'Content-Type': 'text/html'
                  },
                  'body': '''
                  <!DOCTYPE html>
                  <html>
                  <head><title>Secure Photo Downloader</title></head>
                  <body>
                      <h1>Deployment Successful!</h1>
                      <p>Please deploy the actual Lambda function code.</p>
                  </body>
                  </html>
                  '''
              }
      ReservedConcurrencyLimit: 10
      DeadLetterQueue:
        TargetArn: !GetAtt DeadLetterQueue.Arn
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: AuthenticationHandler

  # Dead Letter Queue for failed Lambda invocations
  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${ProjectName}-lambda-dlq'
      MessageRetentionPeriod: 1209600  # 14 days
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Lambda Function URL
  LambdaFunctionUrl:
    Type: AWS::Lambda::Url
    Properties:
      TargetFunctionArn: !GetAtt AuthHandlerFunction.Arn
      AuthType: NONE
      Cors:
        AllowOrigins:
          - '*'
        AllowMethods:
          - GET
          - POST
        AllowHeaders:
          - '*'
        MaxAge: 300

  # Permission for Function URL to invoke Lambda
  LambdaFunctionUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AuthHandlerFunction
      Action: lambda:InvokeFunctionUrl
      Principal: '*'
      FunctionUrlAuthType: NONE

  # CloudWatch Log Group for Lambda
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-auth-handler'
      RetentionInDays: !Ref LogRetentionDays
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch Metric Filter for monitoring errors
  LambdaErrorMetricFilter:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref LambdaLogGroup
      FilterPattern: '[timestamp, request_id, level="ERROR"]'
      MetricTransformations:
        - MetricNamespace: !Sub '${ProjectName}/Lambda'
          MetricName: Errors
          MetricValue: '1'
          DefaultValue: 0

  # CloudWatch Alarm for Lambda errors
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-Lambda-Errors'
      AlarmDescription: 'Alarm for Lambda function errors'
      MetricName: Errors
      Namespace: !Sub '${ProjectName}/Lambda'
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

  # CloudWatch Dashboard for monitoring
  MonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${ProjectName}-monitoring'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", "FunctionName", "${AuthHandlerFunction}" ],
                  [ ".", "Errors", ".", "." ],
                  [ ".", "Duration", ".", "." ]
                ],
                "period": 300,
                "stat": "Sum",
                "region": "${AWS::Region}",
                "title": "Lambda Metrics"
              }
            }
          ]
        }

Conditions:
  IsProduction: !Equals [!Ref Environment, 'production']

Outputs:
  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt AuthHandlerFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionArn'
  
  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref AuthHandlerFunction
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionName'
  
  LambdaFunctionUrl:
    Description: URL of the Lambda function for OAuth callbacks
    Value: !GetAtt LambdaFunctionUrl.FunctionUrl
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionUrl'
  
  LambdaExecutionRoleArn:
    Description: ARN of the Lambda execution role
    Value: !GetAtt LambdaExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaExecutionRoleArn'

  DeadLetterQueueArn:
    Description: ARN of the Dead Letter Queue
    Value: !GetAtt DeadLetterQueue.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DeadLetterQueueArn'

  DeadLetterQueueUrl:
    Description: URL of the Dead Letter Queue
    Value: !Ref DeadLetterQueue
    Export:
      Name: !Sub '${AWS::StackName}-DeadLetterQueueUrl'

  LogGroupName:
    Description: Name of the CloudWatch log group
    Value: !Ref LambdaLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-LogGroupName'

  DashboardUrl:
    Description: URL of the CloudWatch dashboard
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectName}-monitoring'
    Export:
      Name: !Sub '${AWS::StackName}-DashboardUrl'
