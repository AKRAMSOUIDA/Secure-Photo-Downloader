AWSTemplateFormatVersion: '2010-09-09'
Description: 'Cognito User Pool and Identity Pool for Secure Photo Downloader authentication'

Parameters:
  ProjectName:
    Type: String
    Default: secure-photo-downloader
    Description: Name of the project (used for resource naming)
  
  CallbackURL:
    Type: String
    Description: Callback URL for the Cognito app client (Lambda Function URL)
  
  AdminEmail:
    Type: String
    Description: Email address for the admin user
    AllowedPattern: '^[^\s@]+@[^\s@]+\.[^\s@]+$'
    ConstraintDescription: Must be a valid email address

  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Environment name for resource tagging

Resources:
  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub '${ProjectName}-user-pool'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          TemporaryPasswordValidityDays: 7
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: name
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: family_name
          AttributeDataType: String
          Required: false
          Mutable: true
        - Name: given_name
          AttributeDataType: String
          Required: false
          Mutable: true
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        UnusedAccountValidityDays: 7
        InviteMessageAction: EMAIL
      UserPoolTags:
        Project: !Ref ProjectName
        Environment: !Ref Environment
        Purpose: SecureAuthentication
        ManagedBy: CloudFormation

  # Cognito User Pool Domain
  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub '${ProjectName}-${AWS::AccountId}-${AWS::Region}'
      UserPoolId: !Ref UserPool

  # Cognito User Pool Client
  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub '${ProjectName}-app-client'
      UserPoolId: !Ref UserPool
      GenerateSecret: true
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_AUTH
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - !Ref CallbackURL
      LogoutURLs:
        - !Ref CallbackURL
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      RefreshTokenValidity: 5
      AccessTokenValidity: 60
      IdTokenValidity: 60
      TokenValidityUnits:
        AccessToken: minutes
        IdToken: minutes
        RefreshToken: days
      PreventUserExistenceErrors: ENABLED
      EnableTokenRevocation: true

  # Cognito Identity Pool
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: !Sub '${ProjectName}-identity-pool'
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName
          ServerSideTokenCheck: false

  # IAM Role for authenticated users
  CognitoAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-cognito-authenticated-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Purpose
          Value: CognitoAuthentication

  # IAM Policy for enhanced Cognito access
  CognitoEnhancedPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${ProjectName}-cognito-enhanced-policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - cognito-identity:GetCredentialsForIdentity
              - cognito-identity:GetId
              - cognito-identity:GetOpenIdToken
            Resource: '*'
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/cognito/*'
      Roles:
        - !Ref CognitoAuthenticatedRole

  # Identity Pool Role Attachment
  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthenticatedRole.Arn

  # Admin User (optional - can be created manually)
  AdminUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      UserPoolId: !Ref UserPool
      Username: admin
      UserAttributes:
        - Name: email
          Value: !Ref AdminEmail
        - Name: name
          Value: Administrator
        - Name: email_verified
          Value: 'true'
      MessageAction: SUPPRESS
      TemporaryPassword: !Sub 'SecureTemp123!${AWS::AccountId}'

Outputs:
  UserPoolId:
    Description: ID of the Cognito User Pool
    Value: !Ref UserPool
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolId'
  
  UserPoolClientId:
    Description: ID of the Cognito User Pool Client
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolClientId'
  
  UserPoolClientSecret:
    Description: Secret of the Cognito User Pool Client (for server-side applications)
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolClientSecret'
  
  IdentityPoolId:
    Description: ID of the Cognito Identity Pool
    Value: !Ref IdentityPool
    Export:
      Name: !Sub '${AWS::StackName}-IdentityPoolId'
  
  CognitoAuthenticatedRoleArn:
    Description: ARN of the Cognito authenticated role
    Value: !GetAtt CognitoAuthenticatedRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CognitoAuthenticatedRoleArn'
  
  UserPoolDomain:
    Description: Domain name for the Cognito User Pool
    Value: !Sub '${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com'
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolDomain'
  
  HostedUIURL:
    Description: Cognito Hosted UI URL for user authentication
    Value: !Sub 
      - 'https://${Domain}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${ClientId}&response_type=code&scope=email+openid+profile&redirect_uri=${CallbackURL}'
      - Domain: !Ref UserPoolDomain
        ClientId: !Ref UserPoolClient
        CallbackURL: !Ref CallbackURL
    Export:
      Name: !Sub '${AWS::StackName}-HostedUIURL'

  UserPoolArn:
    Description: ARN of the Cognito User Pool
    Value: !GetAtt UserPool.Arn
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolArn'

  AdminUserName:
    Description: Username of the created admin user
    Value: admin
    Export:
      Name: !Sub '${AWS::StackName}-AdminUserName'

  AdminTemporaryPassword:
    Description: Temporary password for the admin user (change on first login)
    Value: !Sub 'SecureTemp123!${AWS::AccountId}'
    Export:
      Name: !Sub '${AWS::StackName}-AdminTemporaryPassword'
